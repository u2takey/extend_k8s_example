/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/u2takey/extend_k8s_example/pkg/apis/simple/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NginxAppLister helps list NginxApps.
type NginxAppLister interface {
	// List lists all NginxApps in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NginxApp, err error)
	// NginxApps returns an object that can list and get NginxApps.
	NginxApps(namespace string) NginxAppNamespaceLister
	NginxAppListerExpansion
}

// nginxAppLister implements the NginxAppLister interface.
type nginxAppLister struct {
	indexer cache.Indexer
}

// NewNginxAppLister returns a new NginxAppLister.
func NewNginxAppLister(indexer cache.Indexer) NginxAppLister {
	return &nginxAppLister{indexer: indexer}
}

// List lists all NginxApps in the indexer.
func (s *nginxAppLister) List(selector labels.Selector) (ret []*v1alpha1.NginxApp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NginxApp))
	})
	return ret, err
}

// NginxApps returns an object that can list and get NginxApps.
func (s *nginxAppLister) NginxApps(namespace string) NginxAppNamespaceLister {
	return nginxAppNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NginxAppNamespaceLister helps list and get NginxApps.
type NginxAppNamespaceLister interface {
	// List lists all NginxApps in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NginxApp, err error)
	// Get retrieves the NginxApp from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NginxApp, error)
	NginxAppNamespaceListerExpansion
}

// nginxAppNamespaceLister implements the NginxAppNamespaceLister
// interface.
type nginxAppNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NginxApps in the indexer for a given namespace.
func (s nginxAppNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NginxApp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NginxApp))
	})
	return ret, err
}

// Get retrieves the NginxApp from the indexer for a given namespace and name.
func (s nginxAppNamespaceLister) Get(name string) (*v1alpha1.NginxApp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nginxapp"), name)
	}
	return obj.(*v1alpha1.NginxApp), nil
}
